name: Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Prepare SSH key (from secret)
        id: prep-key
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ./_ssh
          # пишем приватный ключ в файл (многострочный секрет)
          cat > ./_ssh/id_key <<'KEY'
          ${{ secrets.VPS_SSH_KEY }}
          KEY
          # нормализуем окончания строк на случай CRLF
          sed -i 's/\r$//' ./_ssh/id_key
          chmod 600 ./_ssh/id_key
          echo "KEY_PATH=$GITHUB_WORKSPACE/_ssh/id_key" >> $GITHUB_OUTPUT

      - name: List files (diagnostics)
        run: |
          pwd
          ls -la
          echo "---- bot ----"; ls -la bot || true
          echo "---- tests ----"; ls -la tests || true

      - name: Upload project to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}              # напр. 79.132.138.73
          username: root
          key_path: ${{ steps.prep-key.outputs.KEY_PATH }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}  # если у ключа есть passphrase
          port: ${{ secrets.VPS_PORT || 22 }}
          source: |
            ./*
          target: ${{ secrets.VPS_PATH }}            # напр. /opt/medassistant
          overwrite: true
          # host_fingerprint: ${{ secrets.VPS_HOST_FINGERPRINT }} # опционально

      - name: Build on VPS & restart service
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: root
          key_path: ${{ steps.prep-key.outputs.KEY_PATH }}
          passphrase: ${{ secrets.VPS_PASSPHRASE }}
          port: ${{ secrets.VPS_PORT || 22 }}
          # host_fingerprint: ${{ secrets.VPS_HOST_FINGERPRINT }} # опционально
          script: |
            set -euo pipefail

            APP_DIR="${{ secrets.VPS_PATH }}"
            SERVICE_NAME="medassistant"

            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            # Python venv + deps
            if [ ! -d ".venv" ]; then
              python3 -m venv .venv
            fi
            . .venv/bin/activate
            python -m pip install --upgrade pip
            [ -f requirements.txt ] && python -m pip install -r requirements.txt

            # .env из GitHub Secrets
            cat > .env <<'ENV'
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            OPENAI_ORG=${{ secrets.OPENAI_ORG }}
            OPENAI_BASE_URL=${{ secrets.OPENAI_BASE_URL }}
            MODEL_REASONING=${{ secrets.MODEL_REASONING }}
            MODEL_FRIENDLY=${{ secrets.MODEL_FRIENDLY }}
            DEBUG=${{ secrets.DEBUG }}
            ENV
              chmod 600 .env

              # systemd unit
              cat > /etc/systemd/system/${SERVICE_NAME}.service <<'UNIT'
            [Unit]
            Description=MedAssistant Telegram Bot
            After=network-online.target
            Wants=network-online.target

            [Service]
            Type=simple
            WorkingDirectory=${{ secrets.VPS_PATH }}
            EnvironmentFile=${{ secrets.VPS_PATH }}/.env
            ExecStart=${{ secrets.VPS_PATH }}/.venv/bin/python -m bot.main
            Restart=always
            RestartSec=5
            User=root
            Group=root
            StandardOutput=journal
            StandardError=journal

            [Install]
            WantedBy=multi-user.target
            UNIT

            systemctl daemon-reload
            systemctl enable ${SERVICE_NAME}.service || true
            systemctl restart ${SERVICE_NAME}.service
            systemctl --no-pager -l status ${SERVICE_NAME}.service || true
