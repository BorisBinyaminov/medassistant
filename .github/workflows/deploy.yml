name: Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: List files (diagnostics)
        run: |
          pwd
          ls -la
          echo "---- tree (top level) ----"
          ls -la bot || true
          ls -la tests || true

      # Копируем весь репозиторий в целевую директорию на VPS
      - name: Upload project to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}           # напр. 79.132.138.73
          username: root
          password: ${{ secrets.VPS_PASSPHRASE }} # пароль root
          source: |
            ./*
          target: ${{ secrets.VPS_PATH }}         # напр. /opt/medassistant
          overwrite: true

      # Ставим зависимости, собираем .env из Secrets, создаём/рестартим systemd-сервис
      - name: Build on VPS & restart service
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: root
          password: ${{ secrets.VPS_PASSPHRASE }}
          script: |
            set -euo pipefail

            APP_DIR="${{ secrets.VPS_PATH }}"
            SERVICE_NAME="medassistant"

            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            # Python venv
            if [ ! -d ".venv" ]; then
              python3 -m venv .venv
            fi
            . .venv/bin/activate
            python -m pip install --upgrade pip
            if [ -f requirements.txt ]; then
              python -m pip install -r requirements.txt
            fi

            # Создаём .env из GitHub Secrets (не хранится в гите)
            cat > .env <<'ENV'
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            OPENAI_ORG=${{ secrets.OPENAI_ORG }}
            OPENAI_BASE_URL=${{ secrets.OPENAI_BASE_URL }}
            MODEL_REASONING=${{ secrets.MODEL_REASONING }}
            MODEL_FRIENDLY=${{ secrets.MODEL_FRIENDLY }}
            DEBUG=${{ secrets.DEBUG }}
            ENV
            chmod 600 .env

            # systemd unit (создаём/обновляем)
            cat > /etc/systemd/system/${SERVICE_NAME}.service <<'UNIT'
            [Unit]
            Description=MedAssistant Telegram Bot
            After=network-online.target
            Wants=network-online.target

            [Service]
            Type=simple
            WorkingDirectory=${{ secrets.VPS_PATH }}
            EnvironmentFile=${{ secrets.VPS_PATH }}/.env
            ExecStart=${{ secrets.VPS_PATH }}/.venv/bin/python -m bot.main
            Restart=always
            RestartSec=5
            User=root
            Group=root
            # Логи в journalctl
            StandardOutput=journal
            StandardError=journal

            [Install]
            WantedBy=multi-user.target
            UNIT

            systemctl daemon-reload
            systemctl enable ${SERVICE_NAME}.service || true
            systemctl restart ${SERVICE_NAME}.service

            # Показать статус (всегда завершаться успешно, чтобы не ломать пайплайн)
            systemctl --no-pager -l status ${SERVICE_NAME}.service || true
