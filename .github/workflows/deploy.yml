name: Build & Deploy (GHCR → VPS)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lowercase repo
        run: echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push bot image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: bot/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.REPO_LC }}/bot:latest
            ghcr.io/${{ env.REPO_LC }}/bot:sha-${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}
      VPS_PORT: ${{ secrets.VPS_PORT }}
      VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
      VPS_PASSPHRASE: ${{ secrets.VPS_PASSPHRASE }}
      DEPLOY_DIR: ${{ secrets.DEPLOY_DIR }}

      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
      MODEL_REASONING: ${{ secrets.MODEL_REASONING }}
      MODEL_FRIENDLY: ${{ secrets.MODEL_FRIENDLY }}
      DEBUG: ${{ secrets.DEBUG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          set -euo pipefail
          check() { [ -n "$2" ] || { echo "❌ Missing secret: $1"; exit 1; }; }
          check DEPLOY_DIR  "$DEPLOY_DIR"
          check VPS_HOST    "$VPS_HOST"
          check VPS_USER    "$VPS_USER"
          check VPS_PORT    "$VPS_PORT"
          check VPS_SSH_KEY "$VPS_SSH_KEY"

      - name: Render compose with GHCR image & absolute DEPLOY_DIR
        run: |
          set -euo pipefail
          REPO_LC="${GITHUB_REPOSITORY,,}"
          IMG="ghcr.io/${REPO_LC}/bot:latest"
          sed "s|__BOT_IMAGE__|${IMG}|g" docker-compose.yml > docker-compose.rendered.yml
          sed -i "s|\${DEPLOY_DIR}|${DEPLOY_DIR}|g" docker-compose.rendered.yml
          echo "== Compose debug =="; grep -nE '^\s*image:|^\s*-\s*/' docker-compose.rendered.yml || true

      - name: Pack source tree for server (git ls-files)
        run: |
          set -euo pipefail
          git ls-files | grep -vE '^\.github/|^\.env$|^artifacts/|^README\.md$' > /tmp/filelist.txt
          tar -czf src.tgz -T /tmp/filelist.txt
          ls -lh src.tgz

      - name: Verify payload exists
        run: |
          set -euo pipefail
          test -s ./docker-compose.rendered.yml
          test -s ./src.tgz

      - name: Ensure deploy dir exists
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          port: ${{ env.VPS_PORT }}
          key: ${{ env.VPS_SSH_KEY }}          # <-- ключ целиком из секрета
          passphrase: ${{ env.VPS_PASSPHRASE }} # <-- пароль ключа (если есть)
          script: |
            set -euo pipefail
            mkdir -p "${{ env.DEPLOY_DIR }}"

      - name: Upload compose & source (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          port: ${{ env.VPS_PORT }}
          key: ${{ env.VPS_SSH_KEY }}          # <-- ключ целиком из секрета
          passphrase: ${{ env.VPS_PASSPHRASE }}
          source: "./docker-compose.rendered.yml,./src.tgz"
          target: "${{ env.DEPLOY_DIR }}/"
          overwrite: true
          debug: true

      - name: Deploy on server (compose up -d)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          port: ${{ env.VPS_PORT }}
          key: ${{ env.VPS_SSH_KEY }}          # <-- ключ целиком из секрета
          passphrase: ${{ env.VPS_PASSPHRASE }}
          script: |
            set -euo pipefail

            # 1) Установим Docker + Compose v2, если их нет
            if ! command -v docker >/dev/null 2>&1; then
              echo "→ Installing Docker..."
              curl -fsSL https://get.docker.com | sh
              systemctl enable docker
              systemctl start docker
            fi

            if ! docker compose version >/dev/null 2>&1; then
              echo "→ Installing docker compose plugin..."
              # На большинстве Ubuntu compose-plugin прилетает вместе с get.docker.com,
              # но на всякий случай:
              apt-get update -y || true
              apt-get install -y docker-compose-plugin || true
            fi

            docker --version
            docker compose version

            # 2) Перейдём в директорию деплоя
            cd "${{ env.DEPLOY_DIR }}"

            mkdir -p artifacts
            tar xzf src.tgz
            rm -f src.tgz
            mv -f docker-compose.rendered.yml docker-compose.yml

            # 3) Сгенерируем .env без ведущих пробелов
            cat > .env <<ENV
            TELEGRAM_BOT_TOKEN=${{ env.TELEGRAM_BOT_TOKEN }}
            OPENAI_API_KEY=${{ env.OPENAI_API_KEY }}
            OPENAI_BASE_URL=${{ env.OPENAI_BASE_URL }}
            MODEL_REASONING=${{ env.MODEL_REASONING }}
            MODEL_FRIENDLY=${{ env.MODEL_FRIENDLY }}
            DEBUG=${{ env.DEBUG }}
            ENV
              chmod 600 .env

            # 4) (опционально) логин в GHCR, если образ приватный
            # echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            # 5) Запускаем
            docker compose up -d --force-recreate
            docker compose ps
            CID="$(docker compose ps -q bot)"
            docker inspect -f '{{range .Mounts}}{{.Source}} => {{.Destination}}{{println}}{{end}}' "$CID" || true