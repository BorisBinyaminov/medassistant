# bot/main.py
from __future__ import annotations
import asyncio
from pathlib import Path
from typing import Dict, List

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ContentType
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from html import escape
import json

from bot import config
from .utils import new_case_id, now_iso, normalize_text, sha256_of
from .ocr import ocr_image, parse_pdf
from .lab_extract import extract_panels
from .evidence_io import Evidence, append_evidence, load_evidence
from .handoff import quoted_evidence, package_outputs
from .reviewer import analyze_case, friendly_message
from .interviewer import next_question  # –Ω–æ–≤—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä

# ---------- BOT ----------
bot = Bot(
    token=config.TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML"),
)
dp = Dispatcher(storage=MemoryStorage())

# ---------- FSM ----------
class Intake(StatesGroup):
    dynamic = State()
    awaiting_file = State()
    awaiting_text = State()

# user_id -> —Ç–µ–∫—É—â–∏–π case_id
CURRENT_CASE: Dict[int, str] = {}

def case_for(user_id: int) -> str:
    if user_id not in CURRENT_CASE:
        CURRENT_CASE[user_id] = new_case_id()
    return CURRENT_CASE[user_id]

# ---------- Handlers ----------
@dp.message(CommandStart())
async def on_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–Ω—ë–º –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π ‚Äî /new\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /new ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å)\n"
        "‚Ä¢ /add_text ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—É—â–µ–µ –¥–µ–ª–æ\n"
        "‚Ä¢ /add_file ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª (PDF/JPG/PNG) –≤ —Ç–µ–∫—É—â–µ–µ –¥–µ–ª–æ\n"
        "‚Ä¢ /review &lt;case_id&gt; ‚Äî –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑—é–º–µ\n"
    )

@dp.message(Command("new"))
async def on_new(m: Message, state: FSMContext):
    user_id = m.from_user.id
    CURRENT_CASE[user_id] = new_case_id()
    await state.set_state(Intake.dynamic)
    await state.update_data(history=[], turns=0)
    await m.answer(
        f"üÜï –ù–æ–≤–æ–µ –¥–µ–ª–æ: <code>{CURRENT_CASE[user_id]}</code>\n"
        "–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –≥–ª–∞–≤–Ω—É—é –∂–∞–ª–æ–±—É (–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)."
    )

@dp.message(Intake.dynamic, F.content_type == ContentType.TEXT)
async def on_dynamic_step(m: Message, state: FSMContext):
    user_id = m.from_user.id
    case_id = case_for(user_id)
    text = normalize_text(m.text or "")

    # 1) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ evidence
    ev = Evidence(
        case_id=case_id,
        user_id=user_id,
        role="patient_text",
        fragment=text,
        source={"type": "intake_dynamic", "message_id": m.message_id},
        created_at=now_iso(),
    )
    append_evidence([ev])

    # 2) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM
    data = await state.get_data()
    history: List[dict] = data.get("history", [])
    history.append({"role": "user", "content": text})
    turns = int(data.get("turns", 0)) + 1

    # 3) —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —É –º–æ–¥–µ–ª–∏
    resp = next_question(history)

    # 3a) –µ—Å–ª–∏ —ç—Ç–æ LLM-–æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    if str(resp.get("reason", "")).startswith("llm-error"):
        await state.clear()
        await m.answer("‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        return

    done = bool(resp.get("done"))
    question = (resp.get("question") or "").strip()
    explain = (resp.get("explain") or "").strip()
    summary = (resp.get("summary") or "").strip()
    red_flags = list(resp.get("red_flags") or [])
    urgent = bool(resp.get("urgent", False))

    # 4) –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏ (–∏–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —à–∞–≥–æ–≤) ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥
    if done or turns >= 12:
        await state.clear()

        parts = ["<b>–ò—Ç–æ–≥ –∫—Ä–∞—Ç–∫–æ</b>", summary or "‚Äî"]
        if red_flags:
            parts.append("<b>–ß—Ç–æ –≤–∞–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å/–æ—Ç—Å–µ—á—å (—Å–∫—Ä–∏–Ω–∏–Ω–≥):</b>")
            for rf in red_flags[:4]:
                parts.append(f"‚Ä¢ {escape(rf)}")
        if urgent:
            parts.append("‚ùóÔ∏è –ü–æ –æ–ø–∏—Å–∞–Ω–∏—é —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ä–æ—á–Ω–æ. –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ö—É–¥—à–∞–µ—Ç—Å—è ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –Ω–µ–æ—Ç–ª–æ–∂–Ω–æ–π –ø–æ–º–æ—â—å—é.")

        parts.append(
            f"\n–î–µ–ª–æ: <code>{case_id}</code>\n"
            "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã —á–µ—Ä–µ–∑ /add_file –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ /add_text.\n"
            f"–ì–æ—Ç–æ–≤—ã –∫ –≤—ã–≤–æ–¥—É? /review {case_id}"
        )
        await m.answer("\n".join(parts))
        return

    # 5) –æ–±—ã—á–Ω—ã–π —à–∞–≥ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ + —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    if explain:
        await m.answer(f"<i>{escape(explain)}</i>")
    if not question:
        question = "–ß—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"
    await m.answer(question)

    # 6) –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–ª–∏–∫—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º state
    history.append({"role": "assistant", "content": question})
    await state.update_data(history=history, turns=turns)

@dp.message(Command("add_text"))
async def on_add_text(m: Message, state: FSMContext):
    user_id = m.from_user.id
    cid = case_for(user_id)
    await state.set_state(Intake.awaiting_text)
    await m.answer(f"‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –î–µ–ª–æ: <code>{cid}</code>")

@dp.message(Intake.awaiting_text, F.content_type == ContentType.TEXT)
async def on_add_text_payload(m: Message, state: FSMContext):
    user_id = m.from_user.id
    case_id = case_for(user_id)
    text = normalize_text(m.text or "")
    ev = Evidence(
        case_id=case_id,
        user_id=user_id,
        role="patient_text",
        fragment=text,
        source={"type": "add_text", "message_id": m.message_id},
        created_at=now_iso(),
    )
    append_evidence([ev])
    await state.clear()
    await m.answer(f"üìù –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ –¥–µ–ª—É <code>{case_id}</code>.")

@dp.message(Command("add_file"))
async def on_add_file(m: Message, state: FSMContext):
    user_id = m.from_user.id
    cid = case_for(user_id)
    await state.set_state(Intake.awaiting_file)
    await m.answer(f"üìé –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª (PDF/JPG/PNG). –î–µ–ª–æ: <code>{cid}</code>")

@dp.message(Intake.awaiting_file, F.content_type.in_({ContentType.DOCUMENT, ContentType.PHOTO}))
async def on_file_payload(m: Message, state: FSMContext):
    user_id = m.from_user.id
    case_id = case_for(user_id)

    # —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
    if m.photo:
        file = await bot.get_file(m.photo[-1].file_id)
        suffix = ".jpg"
    else:
        file = await bot.get_file(m.document.file_id)
        suffix = Path(m.document.file_name or "file").suffix or ".bin"
    dest = Path("artifacts") / f"upload_{case_id}{suffix}"
    dest.parent.mkdir(parents=True, exist_ok=True)
    await bot.download_file(file.file_path, destination=dest)

    raw = dest.read_bytes()
    meta = {"type": "upload", "path": str(dest), "sha256": sha256_of(raw)}

    fragments = []
    if dest.suffix.lower() == ".pdf":
        full, per_page = parse_pdf(dest)
        fragments.append(("ocr", full, {**meta}))
        for page_idx, page_text in per_page:
            fragments.append(("ocr", page_text, {**meta, "page": page_idx}))
    else:
        text = ocr_image(dest)
        fragments.append(("ocr", text, meta))

    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –≤—ã–∂–∏–º–∫–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π (regex)
    lab_hits = []
    for _, frag, _ in fragments:
        lab_hits.extend(extract_panels(frag))
    if lab_hits:
        lab_text = "; ".join([f"{k}={v}" for k, v in lab_hits])
        fragments.append(("lab", lab_text, {"type": "lab_extract"}))

    evs = [
        Evidence(
            case_id=case_id,
            user_id=user_id,
            role=role,
            fragment=frag,
            source=meta2,
            created_at=now_iso(),
        )
        for role, frag, meta2 in fragments
    ]
    append_evidence(evs)

    await state.clear()
    await m.answer(
        f"üìÑ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫ –¥–µ–ª—É <code>{case_id}</code>. "
        f"–ú–æ–∂–Ω–æ /add_file –µ—â—ë –∏–ª–∏ /review {case_id}."
    )

@dp.message(Command("review"))
async def on_review(m: Message):
    parts = (m.text or "").split()
    if len(parts) < 2:
        cid = CURRENT_CASE.get(m.from_user.id)
        if not cid:
            await m.answer("–£–∫–∞–∂–∏—Ç–µ: /review <case_id> –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å /new.")
            return
        case_id = cid
    else:
        case_id = parts[1].strip()

    user_id = m.from_user.id
    evs = load_evidence(case_id, user_id)
    if not evs:
        await m.answer("–ù–µ –Ω–∞—à—ë–ª –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–ª–∞. –°–Ω–∞—á–∞–ª–∞ /new –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.")
        return

    quotes = quoted_evidence(evs)
    await m.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–µ–π—Å‚Ä¶")

    try:
        assessment = analyze_case(case_id, quotes)  # STRICT JSON –æ—Ç –º–æ–¥–µ–ª–∏
        friendly = friendly_message(assessment)     # –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–µ–∫—Å—Ç
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏:\n<code>{escape(str(e))}</code>")
        return

    pkg = package_outputs(case_id, assessment, friendly)

    json_str = json.dumps(pkg["clinical_json"], ensure_ascii=False, indent=2)
    json_html = escape(json_str)

    await m.answer(
        "<b>–ö–ª–∏–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑—é–º–µ</b>\n"
        + friendly
        + f"\n\n<code>JSON:</code>\n<pre language=\"json\">{json_html}</pre>"
    )

# –§–æ–ª–ª–±–µ–∫: –≤–Ω–µ –∏–Ω—Ç–µ–π–∫–∞ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞
@dp.message(F.content_type == ContentType.TEXT)
async def on_free_text(m: Message):
    await m.answer(
        "–Ø —Å–µ–π—á–∞—Å —Å–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å—Ü–µ–Ω–∞—Ä–∏–π. –ù–∞–∂–º–∏—Ç–µ /new –∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–î–ª—è –≤–ª–æ–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_file, –¥–ª—è –¥–æ–ø. —Ç–µ–∫—Å—Ç–∞ ‚Äî /add_text."
    )

def run() -> None:
    import logging
    level = logging.DEBUG if config.DEBUG else logging.INFO
    logging.basicConfig(level=level, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
    asyncio.run(dp.start_polling(bot))

if __name__ == "__main__":
    run()
